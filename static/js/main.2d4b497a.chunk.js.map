{"version":3,"sources":["logo.svg","components/Sidebar/SidebarItem.js","components/Sidebar/Sidebar.js","_nav.js","pages/index.js","pages/Test1.js","pages/Test2.js","components/Page/PageContent.js","layouts/Layout.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SidebarItem","props","toggle","e","setState","prevStat","open","preventDefault","stopPropagation","state","item","this","isExpanded","ExpandIcon","Feather","url","className","to","name","href","role","onClick","items","map","subItem","index","key","Component","Sidebar","itemType","navItems","navs","label","pageList","component","Fragment","PageContent","children","id","tabIndex","Layout","nav","src","logo","alt","target","rel","routes","page","path","render","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2d4b497a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\nimport { NavLink } from 'react-router-dom';\nimport * as Feather from 'react-feather';\n\nclass SidebarItem extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            open: false\n        }\n    }\n\n    toggle = e => {\n        this.setState(prevStat => ({open: !prevStat.open}));\n        e.preventDefault();\n        e.stopPropagation();\n    }\n\n\n    render() {\n        const { item } = this.props;\n        const isExpanded = this.state.open ? \"open\" : \"\";\n        const ExpandIcon = this.state.open ? Feather.ChevronDown : Feather.ChevronRight;\n        if (item.url) {\n            return (\n                <li className=\"nav-text\">\n                    <NavLink to={item.url}>\n                        {item.name}\n                    </NavLink>\n                    {/* <a href=\"#\" onClick={ () => {this.setState({open: !this.state.open})}}>{item.label}</a> */}\n                </li>\n            )\n        } else {\n            return (\n                <>\n                    <li className={`nav-text ${isExpanded}`}>\n                        <a href=\"#!\" role=\"button\" onClick={this.toggle}>\n                            {item.name}\n                        </a>\n                        <ExpandIcon className=\"menu-expand-icon\" />\n                    </li>\n                    {(this.state.open && item.items) && (\n                        <ul>\n                            {item.items.map((subItem, index) => (\n                                    <SidebarItem key={index} item={subItem}/>\n                            ))}\n                        </ul>\n                    )}\n                </>\n            );\n        }\n    }\n};\n\nexport default SidebarItem","import React from 'react'\nimport SidebarItem  from './SidebarItem'\nimport '../../css/navbar.css'\n\nfunction Sidebar({ items }) {\n    const itemType = (item, index) => {\n        return <SidebarItem item={item} key={index} />;\n    };\n\n    const navItems = items => {\n        return items.map((item, index) => itemType(item, index));\n    };\n    return (\n        <nav className=\"pro-sidebar\">\n            <ul className=\"nav-menu-items\">\n                {navItems(items.navs)}\n            </ul>\n        </nav>\n    );\n}\nexport default Sidebar","export default {\n    navs: [\n        {\n            name: 'home',\n            label: 'Home',\n            url: '/'\n        },\n        {\n            name: 'test2',\n            label: 'test2',\n            items: [\n                { \n                    name: 'test2 sub1',\n                    label: 'test2 sub1',\n                    url: \"/test1\"\n                },\n                {\n                    name: 'test2 sub2',\n                    label: 'test2 sub2',\n                    items: [\n                        { \n                            name: \"test2 sub2 sub2\",\n                            label: \"test2 sub2 sub2\",\n                            url: \"/test2\"\n                        }\n                    ]\n                }                \n            ]\n        }\n    ]\n};\n","import Test1 from './Test1';\nimport Test2 from './Test2';\n\nconst pageList = [\n    // {\n    //     name: \"home\",\n    //     url: \"/\",\n    // },\n    {\n        name: \"test2 sub1\",\n        url: \"/test1\",\n        component: Test1\n    },\n    {\n        name: \"test2 sub2 sub2\",\n        url: \"/test2\",\n        component: Test2\n    }\n\n];\n\nexport default pageList;","import React from 'react';\n\nexport default function Test1() {\n    return (\n        <React.Fragment>\n            <h1>\n                This is test2 sub1\n            </h1>\n        </React.Fragment>\n    )\n}","import React from 'react';\n\nexport default function Test2() {\n    return (\n        <React.Fragment>\n            <h1>\n                This is test2 sub2 sub2\n            </h1>\n        </React.Fragment>\n    )\n}","import React from 'react';\n\n\nexport default function PageContent({ children }) {\n    return (\n        <main id=\"primary-content\" tabIndex=\"-1\" role=\"main\">\n            {children}\n        </main>\n    );\n}","import React, { Component } from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport Sidebar from \"../components/Sidebar/Sidebar\";\nimport logo from '../logo.svg';\nimport '../App.css';\nimport nav from \"../_nav\";\nimport routes from '../pages';\nimport PageContent from \"../components/Page/PageContent\";\n\n\nexport default class Layout extends Component {\n    render () {\n        return (\n            <div className=\"App\">\n                <Sidebar items={nav} />\n                <header className=\"App-header\">\n                    <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                    <p>\n                    Edit <code>src/App.js</code> and save to reload.\n                    </p>\n                    <a\n                    className=\"App-link\"\n                    href=\"https://reactjs.org\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    >\n                    Learn React\n                    </a>\n                </header>\n                <PageContent>\n                    <Switch>\n                        {routes.map((page, key) => \n                            <Route path={page.url} render={() => <page.component />} key={key}/>\n                        )}\n                    </Switch>\n                </PageContent>\n            </div>\n        )\n    }\n\n}","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Layout from './layouts/Layout';\n\nfunction App() {\n  return (\n      <BrowserRouter>\n        <Switch>\n          <Route component={Layout} />\n        </Switch>\n      </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}